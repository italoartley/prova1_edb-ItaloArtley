/*
 *  Italo Artley Silva Alcântara 14/11/20.
 *
 */
// UEMA
// Manipulação de tempo em c++
// Programa: programa que usa manipuladores de tempo para 
// medir o desempenho de algoritmos de ordenação

#include <locale.h>
#include <iostream>
#include <iomanip>
#include <time.h>   // clock(),time()
#include <stdio.h>   // printf()
#include <stdlib.h>  // exit()


//Vetores usados pelos métodos de ordenação
int *vetorBubbleSort;
int *vetorSelectionSort;
int tamanho;

//Função usada para comparar dois numeros
int compare_ints( const void* a, const void* b ) {
	int* arg1 = (int*) a;
	int* arg2 = (int*) b;
	if( *arg1 < *arg2 ) return -1;
	else if( *arg1 == *arg2 ) return 0;
	else return 1;
}

//Algoritmos de ordenação bubble sort
void bubbleSort(int *vetor, int tamanho) {
	int aux;
	for (int i = 0; i < tamanho-1; i++) {
		for (int j = 0; j < tamanho-1; j++) {
			if (vetor[j] > vetor[j+1]) {
				aux = vetor[j];
				vetor[j] = vetor[j+1];
				vetor[j+1] = aux;
			}
		}
	}
}
//Algoritmos de ordenação selection sort
void selectionSort(int *vetor, int tamanho){
	int aux, min;
	for(int i = 0; i < tamanho; i++){
		min = i;
		for(int j = i + 1; j < tamanho; j++){
			if(vetor[min] > vetor[j]){
				min = j;
			}
		}
		aux = vetor[min];
		vetor[min] = vetor[i];
		vetor[i] = aux;
	}
}

//Observe que os números são gerados aleatoriamente baseados
//em uma semente. Se for passado a mesma semente, os 
//números aleatórios serão os mesmos
void criarVetor(int tamanhoVetor, int semente){
	if(vetorSelectionSort != NULL)
		delete[] vetorSelectionSort;
	if(vetorBubbleSort != NULL)
		delete[] vetorBubbleSort;
  srand (semente);
  vetorBubbleSort = new int[tamanhoVetor];
  vetorSelectionSort = new int[tamanhoVetor];
  for (int i=0;i<tamanhoVetor;i++){
    vetorSelectionSort[i] = rand()%1000;
    vetorBubbleSort[i] =  vetorSelectionSort[i];// utilizar os mesmos valores
	//vetorBubbleSort[i] = rand()%1000;
  }
}

int main ()
{
	//Tamanho do vetor
	int n = 1000;
	//Criar vetor com elementos aleatorios[0,1000] 
	for (int i = 0; i < 1000; i+=1)
	{
		printf("Vetor tamanho: %d\n\n", i);
		criarVetor(i,23);
		//Ordenar utilizando Selecao
		clock_t clock_1, clock_2;
		clock_1 = clock();
		selectionSort(vetorSelectionSort, i);
		clock_2 = clock();
		printf("Tempo de execucao Selecao: %f \n", (double)(clock_2-clock_1)/(double)CLOCKS_PER_SEC);
		

		//Ordenar utilizando bubleSort
		clock_1 = clock();
		bubbleSort(vetorBubbleSort,i);
		clock_2 = clock();
		printf("Tempo de execucao BubbleSort: %f \n", (double)(clock_2-clock_1)/(double)CLOCKS_PER_SEC);
	}

	exit(0);
}
